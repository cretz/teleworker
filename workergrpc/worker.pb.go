// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: workergrpc/worker.proto

package workergrpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Job that can be submitted and stopped by the worker.
type Job struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the job. When submitting a job, this can be provided
	// or it will be generated if not provided.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Command to execute with the first value being the executable and the rest
	// of the values being arguments. When submitting a job, this must have at
	// least one value.
	Command []string `protobuf:"bytes,2,rep,name=command,proto3" json:"command,omitempty"`
	// If non-empty, this will become to root of the filesystem.
	RootFs string `protobuf:"bytes,3,opt,name=root_fs,json=rootFs,proto3" json:"root_fs,omitempty"`
	// When the job was submitted. This value is read-only and cannot be present
	// on job submission.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// ID of the process on the local system. This value is read-only and cannot
	// be present on job submission.
	Pid int64 `protobuf:"varint,5,opt,name=pid,proto3" json:"pid,omitempty"`
	// Current stdout contents of the job. This value is read-only and cannot be
	// present on job submission. When getting a job, this value may be absent if
	// not explicitly requested.
	Stdout []byte `protobuf:"bytes,6,opt,name=stdout,proto3" json:"stdout,omitempty"`
	// Current stderr contents of the job.  This value is read-only and cannot be
	// present on job submission. When getting a job, this value may be absent if
	// not explicitly requested.
	// TODO(cretz): Should we combine stdout and stderr into a repeated set of
	// data chunks containing output type so we can somewhat preserve order?
	Stderr []byte `protobuf:"bytes,7,opt,name=stderr,proto3" json:"stderr,omitempty"`
	// If set, the process has completed and this is the exit code of the process.
	// If this is -1, the process did not provide an exit code. If this is unset,
	// the process is still running. This value is read-only and cannot be present
	// on job submission.
	ExitCode *wrapperspb.Int32Value `protobuf:"bytes,8,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
}

func (x *Job) Reset() {
	*x = Job{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workergrpc_worker_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_workergrpc_worker_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_workergrpc_worker_proto_rawDescGZIP(), []int{0}
}

func (x *Job) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Job) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *Job) GetRootFs() string {
	if x != nil {
		return x.RootFs
	}
	return ""
}

func (x *Job) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Job) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *Job) GetStdout() []byte {
	if x != nil {
		return x.Stdout
	}
	return nil
}

func (x *Job) GetStderr() []byte {
	if x != nil {
		return x.Stderr
	}
	return nil
}

func (x *Job) GetExitCode() *wrapperspb.Int32Value {
	if x != nil {
		return x.ExitCode
	}
	return nil
}

type GetJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required ID for the job to get.
	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// If true, stdout of the job will be present if any output exists.
	IncludeStdout bool `protobuf:"varint,2,opt,name=include_stdout,json=includeStdout,proto3" json:"include_stdout,omitempty"`
	// If true, stderr of the job will be present if any output exists.
	IncludeStderr bool `protobuf:"varint,3,opt,name=include_stderr,json=includeStderr,proto3" json:"include_stderr,omitempty"`
}

func (x *GetJobRequest) Reset() {
	*x = GetJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workergrpc_worker_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobRequest) ProtoMessage() {}

func (x *GetJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workergrpc_worker_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobRequest.ProtoReflect.Descriptor instead.
func (*GetJobRequest) Descriptor() ([]byte, []int) {
	return file_workergrpc_worker_proto_rawDescGZIP(), []int{1}
}

func (x *GetJobRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *GetJobRequest) GetIncludeStdout() bool {
	if x != nil {
		return x.IncludeStdout
	}
	return false
}

func (x *GetJobRequest) GetIncludeStderr() bool {
	if x != nil {
		return x.IncludeStderr
	}
	return false
}

type GetJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job *Job `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
}

func (x *GetJobResponse) Reset() {
	*x = GetJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workergrpc_worker_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobResponse) ProtoMessage() {}

func (x *GetJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_workergrpc_worker_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobResponse.ProtoReflect.Descriptor instead.
func (*GetJobResponse) Descriptor() ([]byte, []int) {
	return file_workergrpc_worker_proto_rawDescGZIP(), []int{2}
}

func (x *GetJobResponse) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

type SubmitJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Job to submit. This must have at least one command. If the ID is not
	// present, one is generated. No other values may be present.
	Job *Job `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
}

func (x *SubmitJobRequest) Reset() {
	*x = SubmitJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workergrpc_worker_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitJobRequest) ProtoMessage() {}

func (x *SubmitJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workergrpc_worker_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitJobRequest.ProtoReflect.Descriptor instead.
func (*SubmitJobRequest) Descriptor() ([]byte, []int) {
	return file_workergrpc_worker_proto_rawDescGZIP(), []int{3}
}

func (x *SubmitJobRequest) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

type SubmitJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The submitted job.
	Job *Job `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
}

func (x *SubmitJobResponse) Reset() {
	*x = SubmitJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workergrpc_worker_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitJobResponse) ProtoMessage() {}

func (x *SubmitJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_workergrpc_worker_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitJobResponse.ProtoReflect.Descriptor instead.
func (*SubmitJobResponse) Descriptor() ([]byte, []int) {
	return file_workergrpc_worker_proto_rawDescGZIP(), []int{4}
}

func (x *SubmitJobResponse) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

type StopJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required ID for the job to stop.
	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// If true, issues a SIGKILL. If false, issues a SIGTERM.
	Force bool `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *StopJobRequest) Reset() {
	*x = StopJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workergrpc_worker_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopJobRequest) ProtoMessage() {}

func (x *StopJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workergrpc_worker_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopJobRequest.ProtoReflect.Descriptor instead.
func (*StopJobRequest) Descriptor() ([]byte, []int) {
	return file_workergrpc_worker_proto_rawDescGZIP(), []int{5}
}

func (x *StopJobRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *StopJobRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type StopJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The completed job. The exit code field is guaranteed to be present.
	Job *Job `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
}

func (x *StopJobResponse) Reset() {
	*x = StopJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workergrpc_worker_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopJobResponse) ProtoMessage() {}

func (x *StopJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_workergrpc_worker_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopJobResponse.ProtoReflect.Descriptor instead.
func (*StopJobResponse) Descriptor() ([]byte, []int) {
	return file_workergrpc_worker_proto_rawDescGZIP(), []int{6}
}

func (x *StopJobResponse) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

type StreamJobOutputRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required ID for the job to stream output for.
	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// Limit the output to only the given stream type. By default both stdout and
	// stderr are present.
	//
	// Types that are assignable to StreamLimit:
	//	*StreamJobOutputRequest_OnlyStdout
	//	*StreamJobOutputRequest_OnlyStderr
	StreamLimit isStreamJobOutputRequest_StreamLimit `protobuf_oneof:"stream_limit"`
	// If true, provides output from the beginning of the job before streaming any
	// new output. If false, only streams new output.
	FromBeginning bool `protobuf:"varint,4,opt,name=from_beginning,json=fromBeginning,proto3" json:"from_beginning,omitempty"`
}

func (x *StreamJobOutputRequest) Reset() {
	*x = StreamJobOutputRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workergrpc_worker_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamJobOutputRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamJobOutputRequest) ProtoMessage() {}

func (x *StreamJobOutputRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workergrpc_worker_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamJobOutputRequest.ProtoReflect.Descriptor instead.
func (*StreamJobOutputRequest) Descriptor() ([]byte, []int) {
	return file_workergrpc_worker_proto_rawDescGZIP(), []int{7}
}

func (x *StreamJobOutputRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (m *StreamJobOutputRequest) GetStreamLimit() isStreamJobOutputRequest_StreamLimit {
	if m != nil {
		return m.StreamLimit
	}
	return nil
}

func (x *StreamJobOutputRequest) GetOnlyStdout() bool {
	if x, ok := x.GetStreamLimit().(*StreamJobOutputRequest_OnlyStdout); ok {
		return x.OnlyStdout
	}
	return false
}

func (x *StreamJobOutputRequest) GetOnlyStderr() bool {
	if x, ok := x.GetStreamLimit().(*StreamJobOutputRequest_OnlyStderr); ok {
		return x.OnlyStderr
	}
	return false
}

func (x *StreamJobOutputRequest) GetFromBeginning() bool {
	if x != nil {
		return x.FromBeginning
	}
	return false
}

type isStreamJobOutputRequest_StreamLimit interface {
	isStreamJobOutputRequest_StreamLimit()
}

type StreamJobOutputRequest_OnlyStdout struct {
	OnlyStdout bool `protobuf:"varint,2,opt,name=only_stdout,json=onlyStdout,proto3,oneof"`
}

type StreamJobOutputRequest_OnlyStderr struct {
	OnlyStderr bool `protobuf:"varint,3,opt,name=only_stderr,json=onlyStderr,proto3,oneof"`
}

func (*StreamJobOutputRequest_OnlyStdout) isStreamJobOutputRequest_StreamLimit() {}

func (*StreamJobOutputRequest_OnlyStderr) isStreamJobOutputRequest_StreamLimit() {}

type StreamJobOutputResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//	*StreamJobOutputResponse_Stdout
	//	*StreamJobOutputResponse_Stderr
	//	*StreamJobOutputResponse_CompletedExitCode
	Response isStreamJobOutputResponse_Response `protobuf_oneof:"response"`
	// If true, the stdout or stderr represent already-stored output. If false,
	// the stdout or stderr represent new output.
	Past bool `protobuf:"varint,4,opt,name=past,proto3" json:"past,omitempty"`
}

func (x *StreamJobOutputResponse) Reset() {
	*x = StreamJobOutputResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workergrpc_worker_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamJobOutputResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamJobOutputResponse) ProtoMessage() {}

func (x *StreamJobOutputResponse) ProtoReflect() protoreflect.Message {
	mi := &file_workergrpc_worker_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamJobOutputResponse.ProtoReflect.Descriptor instead.
func (*StreamJobOutputResponse) Descriptor() ([]byte, []int) {
	return file_workergrpc_worker_proto_rawDescGZIP(), []int{8}
}

func (m *StreamJobOutputResponse) GetResponse() isStreamJobOutputResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *StreamJobOutputResponse) GetStdout() []byte {
	if x, ok := x.GetResponse().(*StreamJobOutputResponse_Stdout); ok {
		return x.Stdout
	}
	return nil
}

func (x *StreamJobOutputResponse) GetStderr() []byte {
	if x, ok := x.GetResponse().(*StreamJobOutputResponse_Stderr); ok {
		return x.Stderr
	}
	return nil
}

func (x *StreamJobOutputResponse) GetCompletedExitCode() int32 {
	if x, ok := x.GetResponse().(*StreamJobOutputResponse_CompletedExitCode); ok {
		return x.CompletedExitCode
	}
	return 0
}

func (x *StreamJobOutputResponse) GetPast() bool {
	if x != nil {
		return x.Past
	}
	return false
}

type isStreamJobOutputResponse_Response interface {
	isStreamJobOutputResponse_Response()
}

type StreamJobOutputResponse_Stdout struct {
	// A chunk of stdout data. There are no bounds to the size of this chunk.
	// When replaying past data, stdout comes before stderr.
	Stdout []byte `protobuf:"bytes,1,opt,name=stdout,proto3,oneof"`
}

type StreamJobOutputResponse_Stderr struct {
	// A chunk of stderr data. There are no bounds to the size of this chunk.
	// When replaying past data, stdout comes before stderr.
	Stderr []byte `protobuf:"bytes,2,opt,name=stderr,proto3,oneof"`
}

type StreamJobOutputResponse_CompletedExitCode struct {
	// When the job has completed and all output has been sent, this is sent
	// as the last message before the stream is closed. This is always sent as
	// the last message for a completed job, even if output stream is requested
	// on an already-completed job.
	CompletedExitCode int32 `protobuf:"varint,3,opt,name=completed_exit_code,json=completedExitCode,proto3,oneof"`
}

func (*StreamJobOutputResponse_Stdout) isStreamJobOutputResponse_Response() {}

func (*StreamJobOutputResponse_Stderr) isStreamJobOutputResponse_Response() {}

func (*StreamJobOutputResponse_CompletedExitCode) isStreamJobOutputResponse_Response() {}

var File_workergrpc_worker_proto protoreflect.FileDescriptor

var file_workergrpc_worker_proto_rawDesc = []byte{
	0x0a, 0x17, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x74, 0x65, 0x6c, 0x65, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xff, 0x01,
	0x0a, 0x03, 0x4a, 0x6f, 0x62, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x66, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x6f, 0x6f, 0x74, 0x46, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73,
	0x74, 0x64, 0x65, 0x72, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x74, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53,
	0x74, 0x64, 0x65, 0x72, 0x72, 0x22, 0x3a, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f,
	0x62, 0x22, 0x3c, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x22,
	0x3d, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x22, 0x3d,
	0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x70, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x3b, 0x0a,
	0x0f, 0x53, 0x74, 0x6f, 0x70, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x28, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x22, 0xac, 0x01, 0x0a, 0x16, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x62, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0b,
	0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x0a, 0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x12,
	0x21, 0x0a, 0x0b, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0a, 0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x74, 0x64, 0x65,
	0x72, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x66, 0x72, 0x6f, 0x6d,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x42, 0x0e, 0x0a, 0x0c, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x9f, 0x01, 0x0a, 0x17, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x62, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x12,
	0x18, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x45, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x70, 0x61, 0x73, 0x74, 0x42,
	0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xf1, 0x02, 0x0a, 0x0a,
	0x4a, 0x6f, 0x62, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x06, 0x47, 0x65,
	0x74, 0x4a, 0x6f, 0x62, 0x12, 0x20, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x09, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x4a, 0x6f, 0x62, 0x12, 0x23, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x74, 0x65,
	0x6c, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x50, 0x0a, 0x07, 0x53, 0x74, 0x6f, 0x70, 0x4a, 0x6f, 0x62, 0x12, 0x21, 0x2e, 0x74,
	0x65, 0x6c, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x6f, 0x70, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x0f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x62,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x29, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x4a, 0x6f, 0x62, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x62, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x42,
	0x28, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x72,
	0x65, 0x74, 0x7a, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2f, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x67, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_workergrpc_worker_proto_rawDescOnce sync.Once
	file_workergrpc_worker_proto_rawDescData = file_workergrpc_worker_proto_rawDesc
)

func file_workergrpc_worker_proto_rawDescGZIP() []byte {
	file_workergrpc_worker_proto_rawDescOnce.Do(func() {
		file_workergrpc_worker_proto_rawDescData = protoimpl.X.CompressGZIP(file_workergrpc_worker_proto_rawDescData)
	})
	return file_workergrpc_worker_proto_rawDescData
}

var file_workergrpc_worker_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_workergrpc_worker_proto_goTypes = []interface{}{
	(*Job)(nil),                     // 0: teleworker.worker.Job
	(*GetJobRequest)(nil),           // 1: teleworker.worker.GetJobRequest
	(*GetJobResponse)(nil),          // 2: teleworker.worker.GetJobResponse
	(*SubmitJobRequest)(nil),        // 3: teleworker.worker.SubmitJobRequest
	(*SubmitJobResponse)(nil),       // 4: teleworker.worker.SubmitJobResponse
	(*StopJobRequest)(nil),          // 5: teleworker.worker.StopJobRequest
	(*StopJobResponse)(nil),         // 6: teleworker.worker.StopJobResponse
	(*StreamJobOutputRequest)(nil),  // 7: teleworker.worker.StreamJobOutputRequest
	(*StreamJobOutputResponse)(nil), // 8: teleworker.worker.StreamJobOutputResponse
	(*timestamppb.Timestamp)(nil),   // 9: google.protobuf.Timestamp
	(*wrapperspb.Int32Value)(nil),   // 10: google.protobuf.Int32Value
}
var file_workergrpc_worker_proto_depIdxs = []int32{
	9,  // 0: teleworker.worker.Job.created_at:type_name -> google.protobuf.Timestamp
	10, // 1: teleworker.worker.Job.exit_code:type_name -> google.protobuf.Int32Value
	0,  // 2: teleworker.worker.GetJobResponse.job:type_name -> teleworker.worker.Job
	0,  // 3: teleworker.worker.SubmitJobRequest.job:type_name -> teleworker.worker.Job
	0,  // 4: teleworker.worker.SubmitJobResponse.job:type_name -> teleworker.worker.Job
	0,  // 5: teleworker.worker.StopJobResponse.job:type_name -> teleworker.worker.Job
	1,  // 6: teleworker.worker.JobService.GetJob:input_type -> teleworker.worker.GetJobRequest
	3,  // 7: teleworker.worker.JobService.SubmitJob:input_type -> teleworker.worker.SubmitJobRequest
	5,  // 8: teleworker.worker.JobService.StopJob:input_type -> teleworker.worker.StopJobRequest
	7,  // 9: teleworker.worker.JobService.StreamJobOutput:input_type -> teleworker.worker.StreamJobOutputRequest
	2,  // 10: teleworker.worker.JobService.GetJob:output_type -> teleworker.worker.GetJobResponse
	4,  // 11: teleworker.worker.JobService.SubmitJob:output_type -> teleworker.worker.SubmitJobResponse
	6,  // 12: teleworker.worker.JobService.StopJob:output_type -> teleworker.worker.StopJobResponse
	8,  // 13: teleworker.worker.JobService.StreamJobOutput:output_type -> teleworker.worker.StreamJobOutputResponse
	10, // [10:14] is the sub-list for method output_type
	6,  // [6:10] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_workergrpc_worker_proto_init() }
func file_workergrpc_worker_proto_init() {
	if File_workergrpc_worker_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_workergrpc_worker_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workergrpc_worker_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workergrpc_worker_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workergrpc_worker_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workergrpc_worker_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workergrpc_worker_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workergrpc_worker_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workergrpc_worker_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamJobOutputRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workergrpc_worker_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamJobOutputResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_workergrpc_worker_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*StreamJobOutputRequest_OnlyStdout)(nil),
		(*StreamJobOutputRequest_OnlyStderr)(nil),
	}
	file_workergrpc_worker_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*StreamJobOutputResponse_Stdout)(nil),
		(*StreamJobOutputResponse_Stderr)(nil),
		(*StreamJobOutputResponse_CompletedExitCode)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_workergrpc_worker_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_workergrpc_worker_proto_goTypes,
		DependencyIndexes: file_workergrpc_worker_proto_depIdxs,
		MessageInfos:      file_workergrpc_worker_proto_msgTypes,
	}.Build()
	File_workergrpc_worker_proto = out.File
	file_workergrpc_worker_proto_rawDesc = nil
	file_workergrpc_worker_proto_goTypes = nil
	file_workergrpc_worker_proto_depIdxs = nil
}
