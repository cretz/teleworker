// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: worker/workerpb/worker.proto

package workerpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Job that can be submitted and stopped by the worker.
type Job struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the job. When submitting a job, this can be provided
	// or it will be generated if not provided.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Command to execute with the first value being the executable and the rest
	// of the values being arguments.
	Command []string `protobuf:"bytes,2,rep,name=command,proto3" json:"command,omitempty"`
	// When the job was submitted.
	SubmittedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=submitted_at,json=submittedAt,proto3" json:"submitted_at,omitempty"`
	// ID of the process on the local system.
	Pid int64 `protobuf:"varint,4,opt,name=pid,proto3" json:"pid,omitempty"`
	// Current stdout contents of the job.
	Stdout []byte `protobuf:"bytes,5,opt,name=stdout,proto3" json:"stdout,omitempty"`
	// Current stderr contents of the job.
	// TODO(cretz): Should we combine stdout and stderr into a repeated set of
	// data chunks containing output type so we can somewhat preserve order?
	Stderr []byte `protobuf:"bytes,6,opt,name=stderr,proto3" json:"stderr,omitempty"`
	// If set, the process has completed and this is the exit code of the process.
	// If this is -1, the process did not provide an exit code. If this is unset,
	// the process is still running.
	ExitCode *wrapperspb.Int32Value `protobuf:"bytes,7,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
}

func (x *Job) Reset() {
	*x = Job{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_workerpb_worker_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_worker_workerpb_worker_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_worker_workerpb_worker_proto_rawDescGZIP(), []int{0}
}

func (x *Job) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Job) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *Job) GetSubmittedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SubmittedAt
	}
	return nil
}

func (x *Job) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *Job) GetStdout() []byte {
	if x != nil {
		return x.Stdout
	}
	return nil
}

func (x *Job) GetStderr() []byte {
	if x != nil {
		return x.Stderr
	}
	return nil
}

func (x *Job) GetExitCode() *wrapperspb.Int32Value {
	if x != nil {
		return x.ExitCode
	}
	return nil
}

type GetJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required ID for the job to get.
	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
}

func (x *GetJobRequest) Reset() {
	*x = GetJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_workerpb_worker_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobRequest) ProtoMessage() {}

func (x *GetJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_worker_workerpb_worker_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobRequest.ProtoReflect.Descriptor instead.
func (*GetJobRequest) Descriptor() ([]byte, []int) {
	return file_worker_workerpb_worker_proto_rawDescGZIP(), []int{1}
}

func (x *GetJobRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

type GetJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job *Job `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
}

func (x *GetJobResponse) Reset() {
	*x = GetJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_workerpb_worker_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobResponse) ProtoMessage() {}

func (x *GetJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_worker_workerpb_worker_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobResponse.ProtoReflect.Descriptor instead.
func (*GetJobResponse) Descriptor() ([]byte, []int) {
	return file_worker_workerpb_worker_proto_rawDescGZIP(), []int{2}
}

func (x *GetJobResponse) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

type SubmitJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Job to submit. This must have at least one command. If the ID is not
	// present, one is generated. No other values may be present.
	Job *Job `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
}

func (x *SubmitJobRequest) Reset() {
	*x = SubmitJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_workerpb_worker_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitJobRequest) ProtoMessage() {}

func (x *SubmitJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_worker_workerpb_worker_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitJobRequest.ProtoReflect.Descriptor instead.
func (*SubmitJobRequest) Descriptor() ([]byte, []int) {
	return file_worker_workerpb_worker_proto_rawDescGZIP(), []int{3}
}

func (x *SubmitJobRequest) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

type SubmitJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The submitted job.
	Job *Job `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
}

func (x *SubmitJobResponse) Reset() {
	*x = SubmitJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_workerpb_worker_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitJobResponse) ProtoMessage() {}

func (x *SubmitJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_worker_workerpb_worker_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitJobResponse.ProtoReflect.Descriptor instead.
func (*SubmitJobResponse) Descriptor() ([]byte, []int) {
	return file_worker_workerpb_worker_proto_rawDescGZIP(), []int{4}
}

func (x *SubmitJobResponse) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

type StopJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required ID for the job to stop.
	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// If true, issues a SIGKILL. If false, issues a SIGTERM.
	Force bool `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *StopJobRequest) Reset() {
	*x = StopJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_workerpb_worker_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopJobRequest) ProtoMessage() {}

func (x *StopJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_worker_workerpb_worker_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopJobRequest.ProtoReflect.Descriptor instead.
func (*StopJobRequest) Descriptor() ([]byte, []int) {
	return file_worker_workerpb_worker_proto_rawDescGZIP(), []int{5}
}

func (x *StopJobRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *StopJobRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type StopJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The completed job. The exit code field is guaranteed to be present.
	Job *Job `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
}

func (x *StopJobResponse) Reset() {
	*x = StopJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_workerpb_worker_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopJobResponse) ProtoMessage() {}

func (x *StopJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_worker_workerpb_worker_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopJobResponse.ProtoReflect.Descriptor instead.
func (*StopJobResponse) Descriptor() ([]byte, []int) {
	return file_worker_workerpb_worker_proto_rawDescGZIP(), []int{6}
}

func (x *StopJobResponse) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

type StreamJobOutputRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required ID for the job to stream output for.
	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// Limit the output to only the given stream type. By default both stdout and
	// stderr are present.
	//
	// Types that are assignable to StreamLimit:
	//	*StreamJobOutputRequest_OnlyStdout
	//	*StreamJobOutputRequest_OnlyStderr
	StreamLimit isStreamJobOutputRequest_StreamLimit `protobuf_oneof:"stream_limit"`
	// If true, provides output from the beginning of the job before streaming any
	// new output. If false, only streams new output.
	FromBeginning bool `protobuf:"varint,4,opt,name=from_beginning,json=fromBeginning,proto3" json:"from_beginning,omitempty"`
}

func (x *StreamJobOutputRequest) Reset() {
	*x = StreamJobOutputRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_workerpb_worker_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamJobOutputRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamJobOutputRequest) ProtoMessage() {}

func (x *StreamJobOutputRequest) ProtoReflect() protoreflect.Message {
	mi := &file_worker_workerpb_worker_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamJobOutputRequest.ProtoReflect.Descriptor instead.
func (*StreamJobOutputRequest) Descriptor() ([]byte, []int) {
	return file_worker_workerpb_worker_proto_rawDescGZIP(), []int{7}
}

func (x *StreamJobOutputRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (m *StreamJobOutputRequest) GetStreamLimit() isStreamJobOutputRequest_StreamLimit {
	if m != nil {
		return m.StreamLimit
	}
	return nil
}

func (x *StreamJobOutputRequest) GetOnlyStdout() bool {
	if x, ok := x.GetStreamLimit().(*StreamJobOutputRequest_OnlyStdout); ok {
		return x.OnlyStdout
	}
	return false
}

func (x *StreamJobOutputRequest) GetOnlyStderr() bool {
	if x, ok := x.GetStreamLimit().(*StreamJobOutputRequest_OnlyStderr); ok {
		return x.OnlyStderr
	}
	return false
}

func (x *StreamJobOutputRequest) GetFromBeginning() bool {
	if x != nil {
		return x.FromBeginning
	}
	return false
}

type isStreamJobOutputRequest_StreamLimit interface {
	isStreamJobOutputRequest_StreamLimit()
}

type StreamJobOutputRequest_OnlyStdout struct {
	OnlyStdout bool `protobuf:"varint,2,opt,name=only_stdout,json=onlyStdout,proto3,oneof"`
}

type StreamJobOutputRequest_OnlyStderr struct {
	OnlyStderr bool `protobuf:"varint,3,opt,name=only_stderr,json=onlyStderr,proto3,oneof"`
}

func (*StreamJobOutputRequest_OnlyStdout) isStreamJobOutputRequest_StreamLimit() {}

func (*StreamJobOutputRequest_OnlyStderr) isStreamJobOutputRequest_StreamLimit() {}

type StreamJobOutputResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//	*StreamJobOutputResponse_Stdout
	//	*StreamJobOutputResponse_Stderr
	//	*StreamJobOutputResponse_CompletedExitCode
	Response isStreamJobOutputResponse_Response `protobuf_oneof:"response"`
	// If true, the stdout or stderr represent already-stored output. If false,
	// the stdout or stderr represent new output.
	Past bool `protobuf:"varint,4,opt,name=past,proto3" json:"past,omitempty"`
}

func (x *StreamJobOutputResponse) Reset() {
	*x = StreamJobOutputResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_workerpb_worker_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamJobOutputResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamJobOutputResponse) ProtoMessage() {}

func (x *StreamJobOutputResponse) ProtoReflect() protoreflect.Message {
	mi := &file_worker_workerpb_worker_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamJobOutputResponse.ProtoReflect.Descriptor instead.
func (*StreamJobOutputResponse) Descriptor() ([]byte, []int) {
	return file_worker_workerpb_worker_proto_rawDescGZIP(), []int{8}
}

func (m *StreamJobOutputResponse) GetResponse() isStreamJobOutputResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *StreamJobOutputResponse) GetStdout() []byte {
	if x, ok := x.GetResponse().(*StreamJobOutputResponse_Stdout); ok {
		return x.Stdout
	}
	return nil
}

func (x *StreamJobOutputResponse) GetStderr() []byte {
	if x, ok := x.GetResponse().(*StreamJobOutputResponse_Stderr); ok {
		return x.Stderr
	}
	return nil
}

func (x *StreamJobOutputResponse) GetCompletedExitCode() int32 {
	if x, ok := x.GetResponse().(*StreamJobOutputResponse_CompletedExitCode); ok {
		return x.CompletedExitCode
	}
	return 0
}

func (x *StreamJobOutputResponse) GetPast() bool {
	if x != nil {
		return x.Past
	}
	return false
}

type isStreamJobOutputResponse_Response interface {
	isStreamJobOutputResponse_Response()
}

type StreamJobOutputResponse_Stdout struct {
	// A chunk of stdout data. There are no bounds to the size of this chunk.
	// When replaying past data, stdout comes before stderr.
	Stdout []byte `protobuf:"bytes,1,opt,name=stdout,proto3,oneof"`
}

type StreamJobOutputResponse_Stderr struct {
	// A chunk of stderr data. There are no bounds to the size of this chunk.
	// When replaying past data, stdout comes before stderr.
	Stderr []byte `protobuf:"bytes,2,opt,name=stderr,proto3,oneof"`
}

type StreamJobOutputResponse_CompletedExitCode struct {
	// When the job has completed and all output has been sent, this is sent
	// as the last message before the stream is closed. This is always sent as
	// the last message for a completed job, even if output stream is requested
	// on an already-completed job.
	// TODO(cretz): While we know that send-then-close is lossy if the client
	// closes the stream, without a client close, is a send-then-close
	// acceptable from a server perspective? I may rework this to just close the
	// stream server side and add proto details to the gRPC status that relay
	// the exit code. Or maybe I'll just keep it simple and expect the caller to
	// obtain the exit code via a normal get.
	CompletedExitCode int32 `protobuf:"varint,3,opt,name=completed_exit_code,json=completedExitCode,proto3,oneof"`
}

func (*StreamJobOutputResponse_Stdout) isStreamJobOutputResponse_Response() {}

func (*StreamJobOutputResponse_Stderr) isStreamJobOutputResponse_Response() {}

func (*StreamJobOutputResponse_CompletedExitCode) isStreamJobOutputResponse_Response() {}

// Configuration for a server.
type ServerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// gRPC server settings.
	GrpcServer *GrpcServerConfig `protobuf:"bytes,1,opt,name=grpc_server,json=grpcServer,proto3" json:"grpc_server,omitempty"`
	// Resource limits per job.
	JobLimits *JobLimitConfig `protobuf:"bytes,2,opt,name=job_limits,json=jobLimits,proto3" json:"job_limits,omitempty"`
}

func (x *ServerConfig) Reset() {
	*x = ServerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_workerpb_worker_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerConfig) ProtoMessage() {}

func (x *ServerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_worker_workerpb_worker_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerConfig.ProtoReflect.Descriptor instead.
func (*ServerConfig) Descriptor() ([]byte, []int) {
	return file_worker_workerpb_worker_proto_rawDescGZIP(), []int{9}
}

func (x *ServerConfig) GetGrpcServer() *GrpcServerConfig {
	if x != nil {
		return x.GrpcServer
	}
	return nil
}

func (x *ServerConfig) GetJobLimits() *JobLimitConfig {
	if x != nil {
		return x.JobLimits
	}
	return nil
}

type GrpcServerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address to listen on. This defaults to 127.0.0.1:8080.
	ListenAddress string `protobuf:"bytes,1,opt,name=listen_address,json=listenAddress,proto3" json:"listen_address,omitempty"`
	// Certificate for server traffic. If not present, the server is not
	// presented over TLS. This must be present if client auth is present.
	ServerCert *GrpcServerConfig_KeyPair `protobuf:"bytes,2,opt,name=server_cert,json=serverCert,proto3" json:"server_cert,omitempty"`
	// Authentication settings for clients. If not present, there is no client
	// authentication.
	ClientTlsAuth *GrpcServerConfig_ClientTlsAuth `protobuf:"bytes,3,opt,name=client_tls_auth,json=clientTlsAuth,proto3" json:"client_tls_auth,omitempty"`
}

func (x *GrpcServerConfig) Reset() {
	*x = GrpcServerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_workerpb_worker_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrpcServerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcServerConfig) ProtoMessage() {}

func (x *GrpcServerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_worker_workerpb_worker_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcServerConfig.ProtoReflect.Descriptor instead.
func (*GrpcServerConfig) Descriptor() ([]byte, []int) {
	return file_worker_workerpb_worker_proto_rawDescGZIP(), []int{10}
}

func (x *GrpcServerConfig) GetListenAddress() string {
	if x != nil {
		return x.ListenAddress
	}
	return ""
}

func (x *GrpcServerConfig) GetServerCert() *GrpcServerConfig_KeyPair {
	if x != nil {
		return x.ServerCert
	}
	return nil
}

func (x *GrpcServerConfig) GetClientTlsAuth() *GrpcServerConfig_ClientTlsAuth {
	if x != nil {
		return x.ClientTlsAuth
	}
	return nil
}

type JobLimitConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CPU limit settings or unset for no CPU limit.
	Cpu *JobLimitConfig_Cpu `protobuf:"bytes,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	// Amount of memory in bytes to limit each job to. If 0/unset, there is no
	// memory limit.
	MaxMemory uint64 `protobuf:"varint,2,opt,name=max_memory,json=maxMemory,proto3" json:"max_memory,omitempty"`
	// IO limit settings per device or empty for no IO limits. Cannot have
	// duplicate device major/minor.
	IoDevices []*JobLimitConfig_IoDevice `protobuf:"bytes,3,rep,name=io_devices,json=ioDevices,proto3" json:"io_devices,omitempty"`
	// If set and true, the network of the job will be isolated.
	// TODO(cretz): Do we want to do anything more than just isolating?
	IsolatedNetwork bool `protobuf:"varint,4,opt,name=isolated_network,json=isolatedNetwork,proto3" json:"isolated_network,omitempty"`
	// If set and true, the network of the job will be isolated.
	// TODO(cretz): Do we want to do anything more than just isolating?
	IsolatedMount bool `protobuf:"varint,5,opt,name=isolated_mount,json=isolatedMount,proto3" json:"isolated_mount,omitempty"`
}

func (x *JobLimitConfig) Reset() {
	*x = JobLimitConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_workerpb_worker_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobLimitConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobLimitConfig) ProtoMessage() {}

func (x *JobLimitConfig) ProtoReflect() protoreflect.Message {
	mi := &file_worker_workerpb_worker_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobLimitConfig.ProtoReflect.Descriptor instead.
func (*JobLimitConfig) Descriptor() ([]byte, []int) {
	return file_worker_workerpb_worker_proto_rawDescGZIP(), []int{11}
}

func (x *JobLimitConfig) GetCpu() *JobLimitConfig_Cpu {
	if x != nil {
		return x.Cpu
	}
	return nil
}

func (x *JobLimitConfig) GetMaxMemory() uint64 {
	if x != nil {
		return x.MaxMemory
	}
	return 0
}

func (x *JobLimitConfig) GetIoDevices() []*JobLimitConfig_IoDevice {
	if x != nil {
		return x.IoDevices
	}
	return nil
}

func (x *JobLimitConfig) GetIsolatedNetwork() bool {
	if x != nil {
		return x.IsolatedNetwork
	}
	return false
}

func (x *JobLimitConfig) GetIsolatedMount() bool {
	if x != nil {
		return x.IsolatedMount
	}
	return false
}

// Key pair. All values are required.
type GrpcServerConfig_KeyPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// File with the PEM-encoded certificate.
	CertFile string `protobuf:"bytes,1,opt,name=cert_file,json=certFile,proto3" json:"cert_file,omitempty"`
	// File with the PEM-encoded private key.
	KeyFile string `protobuf:"bytes,2,opt,name=key_file,json=keyFile,proto3" json:"key_file,omitempty"`
}

func (x *GrpcServerConfig_KeyPair) Reset() {
	*x = GrpcServerConfig_KeyPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_workerpb_worker_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrpcServerConfig_KeyPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcServerConfig_KeyPair) ProtoMessage() {}

func (x *GrpcServerConfig_KeyPair) ProtoReflect() protoreflect.Message {
	mi := &file_worker_workerpb_worker_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcServerConfig_KeyPair.ProtoReflect.Descriptor instead.
func (*GrpcServerConfig_KeyPair) Descriptor() ([]byte, []int) {
	return file_worker_workerpb_worker_proto_rawDescGZIP(), []int{10, 0}
}

func (x *GrpcServerConfig_KeyPair) GetCertFile() string {
	if x != nil {
		return x.CertFile
	}
	return ""
}

func (x *GrpcServerConfig_KeyPair) GetKeyFile() string {
	if x != nil {
		return x.KeyFile
	}
	return ""
}

type GrpcServerConfig_ClientTlsAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required PEM-encoded certificate file for the CA to validate client
	// keys against.
	CaCertFile string `protobuf:"bytes,1,opt,name=ca_cert_file,json=caCertFile,proto3" json:"ca_cert_file,omitempty"`
	// Which certificates can read (i.e. get jobs and stream output). If
	// unset, no clients can read except those that match can-write.
	CanRead *GrpcServerConfig_ClientTlsAuth_CertMatcher `protobuf:"bytes,2,opt,name=can_read,json=canRead,proto3" json:"can_read,omitempty"`
	// Which certificates can write (i.e. submit and stop jobs). All writers
	// can also read. If unset, no clients can write.
	CanWrite *GrpcServerConfig_ClientTlsAuth_CertMatcher `protobuf:"bytes,3,opt,name=can_write,json=canWrite,proto3" json:"can_write,omitempty"`
}

func (x *GrpcServerConfig_ClientTlsAuth) Reset() {
	*x = GrpcServerConfig_ClientTlsAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_workerpb_worker_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrpcServerConfig_ClientTlsAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcServerConfig_ClientTlsAuth) ProtoMessage() {}

func (x *GrpcServerConfig_ClientTlsAuth) ProtoReflect() protoreflect.Message {
	mi := &file_worker_workerpb_worker_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcServerConfig_ClientTlsAuth.ProtoReflect.Descriptor instead.
func (*GrpcServerConfig_ClientTlsAuth) Descriptor() ([]byte, []int) {
	return file_worker_workerpb_worker_proto_rawDescGZIP(), []int{10, 1}
}

func (x *GrpcServerConfig_ClientTlsAuth) GetCaCertFile() string {
	if x != nil {
		return x.CaCertFile
	}
	return ""
}

func (x *GrpcServerConfig_ClientTlsAuth) GetCanRead() *GrpcServerConfig_ClientTlsAuth_CertMatcher {
	if x != nil {
		return x.CanRead
	}
	return nil
}

func (x *GrpcServerConfig_ClientTlsAuth) GetCanWrite() *GrpcServerConfig_ClientTlsAuth_CertMatcher {
	if x != nil {
		return x.CanWrite
	}
	return nil
}

// Matcher for a cert. Considered a match if any of the fields match the
// certificate values.
type GrpcServerConfig_ClientTlsAuth_CertMatcher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Matches a certificate with an organizational unit in this list.
	IncludeOus []string `protobuf:"bytes,1,rep,name=include_ous,json=includeOus,proto3" json:"include_ous,omitempty"`
	// Matches a certificate with a common name in this list.
	IncludeCns []string `protobuf:"bytes,2,rep,name=include_cns,json=includeCns,proto3" json:"include_cns,omitempty"`
	// If true, all certificates match.
	All bool `protobuf:"varint,3,opt,name=all,proto3" json:"all,omitempty"`
}

func (x *GrpcServerConfig_ClientTlsAuth_CertMatcher) Reset() {
	*x = GrpcServerConfig_ClientTlsAuth_CertMatcher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_workerpb_worker_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrpcServerConfig_ClientTlsAuth_CertMatcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcServerConfig_ClientTlsAuth_CertMatcher) ProtoMessage() {}

func (x *GrpcServerConfig_ClientTlsAuth_CertMatcher) ProtoReflect() protoreflect.Message {
	mi := &file_worker_workerpb_worker_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcServerConfig_ClientTlsAuth_CertMatcher.ProtoReflect.Descriptor instead.
func (*GrpcServerConfig_ClientTlsAuth_CertMatcher) Descriptor() ([]byte, []int) {
	return file_worker_workerpb_worker_proto_rawDescGZIP(), []int{10, 1, 0}
}

func (x *GrpcServerConfig_ClientTlsAuth_CertMatcher) GetIncludeOus() []string {
	if x != nil {
		return x.IncludeOus
	}
	return nil
}

func (x *GrpcServerConfig_ClientTlsAuth_CertMatcher) GetIncludeCns() []string {
	if x != nil {
		return x.IncludeCns
	}
	return nil
}

func (x *GrpcServerConfig_ClientTlsAuth_CertMatcher) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

// CPU limits. All values must be above zero.
type JobLimitConfig_Cpu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Amount of CPU microseconds to divy up.
	PeriodMicros uint64 `protobuf:"varint,1,opt,name=period_micros,json=periodMicros,proto3" json:"period_micros,omitempty"`
	// Amount of CPU microseconds allowed over the period.
	QuotaMicros uint64 `protobuf:"varint,2,opt,name=quota_micros,json=quotaMicros,proto3" json:"quota_micros,omitempty"`
}

func (x *JobLimitConfig_Cpu) Reset() {
	*x = JobLimitConfig_Cpu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_workerpb_worker_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobLimitConfig_Cpu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobLimitConfig_Cpu) ProtoMessage() {}

func (x *JobLimitConfig_Cpu) ProtoReflect() protoreflect.Message {
	mi := &file_worker_workerpb_worker_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobLimitConfig_Cpu.ProtoReflect.Descriptor instead.
func (*JobLimitConfig_Cpu) Descriptor() ([]byte, []int) {
	return file_worker_workerpb_worker_proto_rawDescGZIP(), []int{11, 0}
}

func (x *JobLimitConfig_Cpu) GetPeriodMicros() uint64 {
	if x != nil {
		return x.PeriodMicros
	}
	return 0
}

func (x *JobLimitConfig_Cpu) GetQuotaMicros() uint64 {
	if x != nil {
		return x.QuotaMicros
	}
	return 0
}

type JobLimitConfig_IoDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Amount of bytes per second allowed on this device. Must be above zero.
	BytesPerSecond uint64 `protobuf:"varint,1,opt,name=bytes_per_second,json=bytesPerSecond,proto3" json:"bytes_per_second,omitempty"`
	// Device major version. If unset, uses the major version of the device
	// where the worker's executable resides.
	MajorVersion *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=major_version,json=majorVersion,proto3" json:"major_version,omitempty"`
	// Device minor version. If unset, uses the minor version of the device
	// where the worker's executable resides.
	MinorVersion *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=minor_version,json=minorVersion,proto3" json:"minor_version,omitempty"`
}

func (x *JobLimitConfig_IoDevice) Reset() {
	*x = JobLimitConfig_IoDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_workerpb_worker_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobLimitConfig_IoDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobLimitConfig_IoDevice) ProtoMessage() {}

func (x *JobLimitConfig_IoDevice) ProtoReflect() protoreflect.Message {
	mi := &file_worker_workerpb_worker_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobLimitConfig_IoDevice.ProtoReflect.Descriptor instead.
func (*JobLimitConfig_IoDevice) Descriptor() ([]byte, []int) {
	return file_worker_workerpb_worker_proto_rawDescGZIP(), []int{11, 1}
}

func (x *JobLimitConfig_IoDevice) GetBytesPerSecond() uint64 {
	if x != nil {
		return x.BytesPerSecond
	}
	return 0
}

func (x *JobLimitConfig_IoDevice) GetMajorVersion() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MajorVersion
	}
	return nil
}

func (x *JobLimitConfig_IoDevice) GetMinorVersion() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MinorVersion
	}
	return nil
}

var File_worker_workerpb_worker_proto protoreflect.FileDescriptor

var file_worker_workerpb_worker_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x70,
	0x62, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11,
	0x74, 0x65, 0x6c, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xea, 0x01, 0x0a, 0x03, 0x4a, 0x6f, 0x62, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73,
	0x74, 0x64, 0x65, 0x72, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x26, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x03, 0x6a, 0x6f, 0x62,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03,
	0x6a, 0x6f, 0x62, 0x22, 0x3c, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4a, 0x6f, 0x62,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f,
	0x62, 0x22, 0x3d, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62,
	0x22, 0x3d, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x70, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22,
	0x3b, 0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x70, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x28, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x22, 0xac, 0x01, 0x0a,
	0x16, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x62, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0b, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0a, 0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x74, 0x64, 0x6f, 0x75,
	0x74, 0x12, 0x21, 0x0a, 0x0b, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0a, 0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x74,
	0x64, 0x65, 0x72, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x62, 0x65, 0x67,
	0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x66, 0x72,
	0x6f, 0x6d, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x42, 0x0e, 0x0a, 0x0c, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x9f, 0x01, 0x0a, 0x17,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x62, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75,
	0x74, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x70, 0x61, 0x73,
	0x74, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x96, 0x01,
	0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x44,
	0x0a, 0x0b, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x67, 0x72, 0x70, 0x63, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x6a, 0x6f, 0x62,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x22, 0xf2, 0x04, 0x0a, 0x10, 0x47, 0x72, 0x70, 0x63, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x6c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x4c, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x70, 0x63,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4b, 0x65, 0x79,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74,
	0x12, 0x59, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6c, 0x73, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x47, 0x72,
	0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6c, 0x73, 0x41, 0x75, 0x74, 0x68, 0x52, 0x0d, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6c, 0x73, 0x41, 0x75, 0x74, 0x68, 0x1a, 0x41, 0x0a, 0x07, 0x4b,
	0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x65, 0x72, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x1a, 0xca,
	0x02, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6c, 0x73, 0x41, 0x75, 0x74, 0x68,
	0x12, 0x20, 0x0a, 0x0c, 0x63, 0x61, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x58, 0x0a, 0x08, 0x63, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6c, 0x73, 0x41, 0x75, 0x74, 0x68, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x12, 0x5a, 0x0a, 0x09,
	0x63, 0x61, 0x6e, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3d, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6c, 0x73, 0x41, 0x75,
	0x74, 0x68, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x08,
	0x63, 0x61, 0x6e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x1a, 0x61, 0x0a, 0x0b, 0x43, 0x65, 0x72, 0x74,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x6f, 0x75, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x4f, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x5f, 0x63, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x6e, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6c, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x22, 0x91, 0x04, 0x0a, 0x0e,
	0x4a, 0x6f, 0x62, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x37,
	0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x65,
	0x6c, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e,
	0x4a, 0x6f, 0x62, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43,
	0x70, 0x75, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x61, 0x78,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x49, 0x0a, 0x0a, 0x69, 0x6f, 0x5f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x65, 0x6c,
	0x65, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x4a,
	0x6f, 0x62, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6f,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x6f,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x25, 0x0a, 0x0e,
	0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x6f,
	0x75, 0x6e, 0x74, 0x1a, 0x4d, 0x0a, 0x03, 0x43, 0x70, 0x75, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x4d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x1a, 0xba, 0x01, 0x0a, 0x08, 0x49, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x28, 0x0a, 0x10, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x41, 0x0a, 0x0d, 0x6d, 0x61, 0x6a,
	0x6f, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c,
	0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0d,
	0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32,
	0xf1, 0x02, 0x0a, 0x0a, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4d,
	0x0a, 0x06, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x12, 0x20, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x74, 0x65, 0x6c,
	0x65, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a,
	0x09, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4a, 0x6f, 0x62, 0x12, 0x23, 0x2e, 0x74, 0x65, 0x6c,
	0x65, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x07, 0x53, 0x74, 0x6f, 0x70, 0x4a, 0x6f, 0x62,
	0x12, 0x21, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x4a, 0x6f, 0x62, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x0f, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x4a, 0x6f, 0x62, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x29, 0x2e, 0x74, 0x65, 0x6c,
	0x65, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x62, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x77, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x4a, 0x6f, 0x62, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x30, 0x01, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x72, 0x65, 0x74, 0x7a, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x77, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_worker_workerpb_worker_proto_rawDescOnce sync.Once
	file_worker_workerpb_worker_proto_rawDescData = file_worker_workerpb_worker_proto_rawDesc
)

func file_worker_workerpb_worker_proto_rawDescGZIP() []byte {
	file_worker_workerpb_worker_proto_rawDescOnce.Do(func() {
		file_worker_workerpb_worker_proto_rawDescData = protoimpl.X.CompressGZIP(file_worker_workerpb_worker_proto_rawDescData)
	})
	return file_worker_workerpb_worker_proto_rawDescData
}

var file_worker_workerpb_worker_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_worker_workerpb_worker_proto_goTypes = []interface{}{
	(*Job)(nil),                                        // 0: teleworker.worker.Job
	(*GetJobRequest)(nil),                              // 1: teleworker.worker.GetJobRequest
	(*GetJobResponse)(nil),                             // 2: teleworker.worker.GetJobResponse
	(*SubmitJobRequest)(nil),                           // 3: teleworker.worker.SubmitJobRequest
	(*SubmitJobResponse)(nil),                          // 4: teleworker.worker.SubmitJobResponse
	(*StopJobRequest)(nil),                             // 5: teleworker.worker.StopJobRequest
	(*StopJobResponse)(nil),                            // 6: teleworker.worker.StopJobResponse
	(*StreamJobOutputRequest)(nil),                     // 7: teleworker.worker.StreamJobOutputRequest
	(*StreamJobOutputResponse)(nil),                    // 8: teleworker.worker.StreamJobOutputResponse
	(*ServerConfig)(nil),                               // 9: teleworker.worker.ServerConfig
	(*GrpcServerConfig)(nil),                           // 10: teleworker.worker.GrpcServerConfig
	(*JobLimitConfig)(nil),                             // 11: teleworker.worker.JobLimitConfig
	(*GrpcServerConfig_KeyPair)(nil),                   // 12: teleworker.worker.GrpcServerConfig.KeyPair
	(*GrpcServerConfig_ClientTlsAuth)(nil),             // 13: teleworker.worker.GrpcServerConfig.ClientTlsAuth
	(*GrpcServerConfig_ClientTlsAuth_CertMatcher)(nil), // 14: teleworker.worker.GrpcServerConfig.ClientTlsAuth.CertMatcher
	(*JobLimitConfig_Cpu)(nil),                         // 15: teleworker.worker.JobLimitConfig.Cpu
	(*JobLimitConfig_IoDevice)(nil),                    // 16: teleworker.worker.JobLimitConfig.IoDevice
	(*timestamppb.Timestamp)(nil),                      // 17: google.protobuf.Timestamp
	(*wrapperspb.Int32Value)(nil),                      // 18: google.protobuf.Int32Value
	(*wrapperspb.UInt32Value)(nil),                     // 19: google.protobuf.UInt32Value
}
var file_worker_workerpb_worker_proto_depIdxs = []int32{
	17, // 0: teleworker.worker.Job.submitted_at:type_name -> google.protobuf.Timestamp
	18, // 1: teleworker.worker.Job.exit_code:type_name -> google.protobuf.Int32Value
	0,  // 2: teleworker.worker.GetJobResponse.job:type_name -> teleworker.worker.Job
	0,  // 3: teleworker.worker.SubmitJobRequest.job:type_name -> teleworker.worker.Job
	0,  // 4: teleworker.worker.SubmitJobResponse.job:type_name -> teleworker.worker.Job
	0,  // 5: teleworker.worker.StopJobResponse.job:type_name -> teleworker.worker.Job
	10, // 6: teleworker.worker.ServerConfig.grpc_server:type_name -> teleworker.worker.GrpcServerConfig
	11, // 7: teleworker.worker.ServerConfig.job_limits:type_name -> teleworker.worker.JobLimitConfig
	12, // 8: teleworker.worker.GrpcServerConfig.server_cert:type_name -> teleworker.worker.GrpcServerConfig.KeyPair
	13, // 9: teleworker.worker.GrpcServerConfig.client_tls_auth:type_name -> teleworker.worker.GrpcServerConfig.ClientTlsAuth
	15, // 10: teleworker.worker.JobLimitConfig.cpu:type_name -> teleworker.worker.JobLimitConfig.Cpu
	16, // 11: teleworker.worker.JobLimitConfig.io_devices:type_name -> teleworker.worker.JobLimitConfig.IoDevice
	14, // 12: teleworker.worker.GrpcServerConfig.ClientTlsAuth.can_read:type_name -> teleworker.worker.GrpcServerConfig.ClientTlsAuth.CertMatcher
	14, // 13: teleworker.worker.GrpcServerConfig.ClientTlsAuth.can_write:type_name -> teleworker.worker.GrpcServerConfig.ClientTlsAuth.CertMatcher
	19, // 14: teleworker.worker.JobLimitConfig.IoDevice.major_version:type_name -> google.protobuf.UInt32Value
	19, // 15: teleworker.worker.JobLimitConfig.IoDevice.minor_version:type_name -> google.protobuf.UInt32Value
	1,  // 16: teleworker.worker.JobService.GetJob:input_type -> teleworker.worker.GetJobRequest
	3,  // 17: teleworker.worker.JobService.SubmitJob:input_type -> teleworker.worker.SubmitJobRequest
	5,  // 18: teleworker.worker.JobService.StopJob:input_type -> teleworker.worker.StopJobRequest
	7,  // 19: teleworker.worker.JobService.StreamJobOutput:input_type -> teleworker.worker.StreamJobOutputRequest
	2,  // 20: teleworker.worker.JobService.GetJob:output_type -> teleworker.worker.GetJobResponse
	4,  // 21: teleworker.worker.JobService.SubmitJob:output_type -> teleworker.worker.SubmitJobResponse
	6,  // 22: teleworker.worker.JobService.StopJob:output_type -> teleworker.worker.StopJobResponse
	8,  // 23: teleworker.worker.JobService.StreamJobOutput:output_type -> teleworker.worker.StreamJobOutputResponse
	20, // [20:24] is the sub-list for method output_type
	16, // [16:20] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_worker_workerpb_worker_proto_init() }
func file_worker_workerpb_worker_proto_init() {
	if File_worker_workerpb_worker_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_worker_workerpb_worker_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_workerpb_worker_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_workerpb_worker_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_workerpb_worker_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_workerpb_worker_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_workerpb_worker_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_workerpb_worker_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_workerpb_worker_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamJobOutputRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_workerpb_worker_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamJobOutputResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_workerpb_worker_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_workerpb_worker_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrpcServerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_workerpb_worker_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobLimitConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_workerpb_worker_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrpcServerConfig_KeyPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_workerpb_worker_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrpcServerConfig_ClientTlsAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_workerpb_worker_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrpcServerConfig_ClientTlsAuth_CertMatcher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_workerpb_worker_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobLimitConfig_Cpu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_workerpb_worker_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobLimitConfig_IoDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_worker_workerpb_worker_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*StreamJobOutputRequest_OnlyStdout)(nil),
		(*StreamJobOutputRequest_OnlyStderr)(nil),
	}
	file_worker_workerpb_worker_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*StreamJobOutputResponse_Stdout)(nil),
		(*StreamJobOutputResponse_Stderr)(nil),
		(*StreamJobOutputResponse_CompletedExitCode)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_worker_workerpb_worker_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_worker_workerpb_worker_proto_goTypes,
		DependencyIndexes: file_worker_workerpb_worker_proto_depIdxs,
		MessageInfos:      file_worker_workerpb_worker_proto_msgTypes,
	}.Build()
	File_worker_workerpb_worker_proto = out.File
	file_worker_workerpb_worker_proto_rawDesc = nil
	file_worker_workerpb_worker_proto_goTypes = nil
	file_worker_workerpb_worker_proto_depIdxs = nil
}
